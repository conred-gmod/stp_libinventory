namespace stp.inv;

-- Габариты предмета
struct .ItemInvSize {
    .Height: nonzero_uint
    .Width: nonzero_uint
}

const .MAX_INV_SIZE: uint
const .INV_SIZE_BITS: uint

enum .ITEM_DIR {
    .RIGHT = 0, -- "right" is a default direction
    .DOWN = 1,
    .LEFT = 2,
    .UP = 3
}

struct .ItemInvPos {
    .X: uint,
    .Y: uint,
    
    .Dir: .ITEM_DIR
}

const .DEFAULT_INV_POS: .ItemInvPos = { .X = 0, .Y = 0, .Dir: .ITEM_DIR.RIGHT }

namespace schema {
    ItemInvSize = stp.obj.net.schema.Schema({TData = stp.inv.ItemInvSize})

    ItemInvPos = stp.obj.net.schema.Schema({TData = stp.inv.ItemInvPos})
}


trait .Item {
    require stp.net.EasyComposite

    abstract fn :GetName() -> string
    abstract fn :GetDesc() -> string
    abstract fn :GetSize() -> .ItemInvSize

    fn :GetWorldEntity() -> Entity | nil

    -- Предмет может быть или не быть в инвентаре.
    -- TODO: Добавить поддержку нахождения в нескольких инвентарях сразу (двуручное оружие, каждая рука - отдельный инвентарь)
    fn :GetInventory() -> .Inventory | nil
    fn :GetInventoryPos() -> .ItemInvPos | nil -- Do NOT modify returned table by-reference    

    SV fn :TryMoveToWorld(pos: Vector, ang: Angle|nil) -> entity: Entity|nil, error: nil|string
    SV fn :TryMoveToInventory(inv: .Inventory, pos: .ItemInvPos) -> error: nil|string
    -- Если в pos_hint предмет не влезет (или он не указан), попытается сдвинуть или повернуть предмет так, чтобы влезло
    SV fn :TryMoveToInventory_Fit(inv: .Inventory, pos_hint: .ItemInvPos|nil) -> error: nil|string
}

trait .Inventory {
    require stp.net.EasyComposite

    -- Inventory size (in slots)
    ctorparam .Height: nonzero_uint -- Inventory size is a constant
    ctorparam .Width: nonzero_uint
    fn :GetHeight() -> nonzero_uint
    fn :GetWidth() -> nonzero_uint


    abstract fn :GetItems() -> array(.Item)

    abstract fn :CanPut(pos: .ItemInvPos, size: .ItemInvSize) -> bool
    abstract fn :CanPutIfMovedFrom(new_pos: .ItemInvPos, size: .ItemInvSize, old_pos: .ItemInvPos) -> bool

    abstract fn :FitPosition(pos_hint: .ItemInvPos|nil, size: .ItemInvSize) -> .ItemInvPos|nil
    abstract fn :FitPositionIfMovedFrom(new_pos_hint: .ItemInvPos|nil, size: .ItemInvSize, old_pos: .ItemInvPos) -> .ItemInvPos|nil

    -- pos is validated by CanPut/FitPosition or variations.
    -- Following functions are not supposed to be called by user code.
    abstract fn :PutItem(item: .Item, pos: .ItemInvPos)
    abstract fn :TakeItem(item: .Item)
}

-- Инвентарь, который может содержать несколько предметов
struct .MultiItemInv {
    require .Inventory

    impl fn :GetItems() -> array(.Item)
}

-- Инвентарь, который может содержать только один предмет
struct .SingleItemInv {
    require .Inventory

    impl fn :GetItems() -> array(.Item)
    impl fn :GetItem() -> .Item | nil
}